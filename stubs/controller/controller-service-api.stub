<?php

namespace {{ namespace }};

use {{ namespacedModel }};
use {{ rootNamespace }}Http\Controllers\Controller;
use {{ namespacedRequests }}
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use App\Interfaces\Services\{{ model }}ServiceInterface;

class {{ class }} extends Controller
{
    /**
     * Instantiate a new Controllers instance.
     */
    public function __construct()
    {
        $this->policyModel = {{ model }}::class;
        $this->authorizeResource({{ model }}::class);
    }

    /**
     * Display a listing of the resource.
     */
    public function index(Request $request, {{ model }}ServiceInterface $service)
    {
        return $this->responseJson($service->datatable($request));
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store({{ storeRequest }} $request, {{ model }}ServiceInterface $service)
    {   
        DB::beginTransaction();

        try {
            $service->create($request);
        } catch (\Throwable $th) {
            DB::rollBack();
            Log::error($th->getMessage());

            return $this->responseJsonMessageCrud(false, 'create', null, $th->getMessage(), 500);
        }

        DB::commit();

        return $this->responseJsonMessageCrud(true, 'create');
    }

    /**
     * Display the specified resource.
     */
    public function show({{ model }} ${{ modelVariable }}, {{ model }}ServiceInterface $service)
    {
        $data = $service->show(${{ modelVariable }});

        return $this->responseJsonData($data);
    }

    /**
     * Update the specified resource in storage.
     */
    public function update({{ updateRequest }} $request, {{ model }} ${{ modelVariable }}, {{ model }}ServiceInterface $service)
    {   
        DB::beginTransaction();

        try {
            $service->update($request, ${{ modelVariable }});
        } catch (\Throwable $th) {
            DB::rollBack();
            Log::error($th->getMessage());

            return $this->responseJsonMessageCrud(false, 'update', null, $th->getMessage(), 500);
        }

        DB::commit();

        return $this->responseJsonMessageCrud(true, 'update');
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy({{ model }} ${{ modelVariable }}, {{ model }}ServiceInterface $service)
    {
        DB::beginTransaction();

        try {
            $service->delete(${{ modelVariable }});
        } catch (\Throwable $th) {
            DB::rollBack();
            Log::error($th->getMessage());

            return $this->responseJsonMessageCrud(false, 'delete', null, $th->getMessage(), 500);
        }

        DB::commit();

        return $this->responseJsonMessageCrud(true, 'delete');
    }
}
